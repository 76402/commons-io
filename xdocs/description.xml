<?xml version="1.0"?>
<!--
Copyright 2002-2005 The Apache Software Foundation.
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific iouage governing permissions and
limitations under the License.
-->
<document>
 <properties>
  <title>User guide</title>
  <author email="commons-dev@jakarta.apache.org">Commons Documentation Team</author>
 </properties>
  <body>

    <section name="Commons IO">
        <p>
            Commons-IO contains <a href="#Utility classes">utility classes</a>,
            stream implementations, <a href="#File filters">file filters</a>, and
            <a href="#Endian classes">endian classes</a>.
        </p>

        <p>
            For a more detailed descriptions, take a look at the
            <a href="apidocs/index.html">JavaDocs</a>.
        </p>
    </section>

    <section name="Utility classes">
        <subsection name="IOUtils">
            <p>
                <code>org.apache.commons.io.IOUtils</code>
                contains utility methods dealing with reading, writing and copying.
                The methods work on InputStream, OutputStream, Reader and Writer.
            </p>
            <p>
                As an example, consider the task of reading bytes
                from a URL, and printing them. This would typically done like this:
            </p>

            <source>
    InputStream in = new URL( "http://jakarta.apache.org" ).openStream();
    try {
        InputStreamReader inR = new InputStreamReader( in );
        BufferedReader buf = new BufferedReader( inR );
        String line;
        while ( ( line = buf.readLine() ) != null ) {
            System.out.println( line );
        }
    } finally {
        in.close();
    }
            </source>

            <p>
                With the IOUtils class, that could be done with:
            </p>

            <source>
    InputStream in = new URL( "http://jakarta.apache.org" ).openStream();
    try {
        System.out.println( IOUtils.toString( in ) );
    } finally {
        IOUtils.closeQuietly(in);
    }
            </source>

            <p>
                In certain application domains, such IO operations are
                common, and this class can save a great deal of time. And you can
                rely on well-tested code.

                For utility code such as this, flexibility and speed are of primary importance.
            </p>

        </subsection>

        <subsection name="FileUtils">
            <p>
                The <code>org.apache.commons.io.FileUtils</code> class contains
                utility methods for working with File objects.
                These include reading, writing, copying and comparing files.
            </p>
        </subsection>

        <subsection name="FilenameUtils">
            <p>
                The <code>org.apache.commons.io.FilenameUtils</code> class contains
                utility methods for working with filenames <i>without</i>
                using File objects. The class aims to be consistent
                between Unix and Windows, to aid transitions between these
                environments (such as moving from development to production).
            </p>
        </subsection>

        <subsection name="FileSystemUtils">
            <p>
                The <code>org.apache.commons.io.FileSystemUtils</code> class contains
                utility methods for working with the file system
                to access functionality not supported by the JDK.
                Currently, the only method is to get the free space on a drive.
                Note that this uses the command line, not native code.
            </p>
        </subsection>

    </section>

    <section name="File filters">
        <p>
            The <code>org.apache.commons.io.filefilter</code>
            package defines an interface (<code>IOFileFilter</code>) that
            combines both <code>java.io.FileFilter</code> and
            <code>java.io.FilenameFilter</code>. Besides
            that the package offers a series of ready-to-use
            implementations of the <code>IOFileFilter</code>
            interface including
            implementation that allow you to combine other such filters.

            These filter can be used to list files or in FileDialog, for example.
        </p>
    </section>

    <section name="Endian classes">
        <p>
            Different computer architectures adopt different
            conventions for byte ordering. In so-called
            "Little Endian" architectures (eg Intel), the low-order
            byte is stored in memory at the lowest address, and
            subsequent bytes at higher addresses. For "Big Endian"
            architectures (eg Motorola), the situation is reversed.
        </p>

        <p>
        There are two classes in this package of relevance:
        </p>

        <ul>
           <li>
           The <code>org.apache.commons.io.EndianUtils</code>
           class contains static methods for swapping the Endian-ness
           of Java primitives and streams.
           </li>

           <li>
           The <code>org.apache.commons.io.input.SwappedDataInputStream</code>
           class is an implementation of the <code>DataInput</code> interface. With
           this, one can read data from files of non-native Endian-ness.
           </li>
        </ul>

        <p>
            For more information, see
            <a
                href="http://www.cs.umass.edu/~verts/cs32/endian.html">http://www.cs.umass.edu/~verts/cs32/endian.html</a>
         </p>

    </section>

  </body>

</document>
